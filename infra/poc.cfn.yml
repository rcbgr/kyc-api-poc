---
AWSTemplateFormatVersion: 2010-09-09

Description: KYC API POC

Parameters:

  AvailabilityZone0:
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  CertificateArn:
    Type: String
    Description: The TLS certificate ARN
    MinLength: 20
    MaxLength: 2048

  EnvName:
    Type: String
    Description: Environment name
    Default: dev
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: Specify either dev or prod environment

  ServiceImage:
    Type: String

  S3PrefixListId:
    Type: String

  DynamoDbPrefixListId:
    Type: String


Mappings:

  CidrMap:
    Vpc:
      Cidr: 10.50.0.0/16
    Public0:
      Cidr: 10.50.0.0/24
    Public1:
      Cidr: 10.50.1.0/24
    Private0:
      Cidr: 10.50.64.0/19
    Private1:
      Cidr: 10.50.96.0/19

  # This is a temp facility - another key / credential service should
  # be created with ID mapping
  TenantIds:
    Tenant0:
      Id: 15e8ab60-6e3a11ec90d60242ac120003
    Tenant1:
      Id: 2e592b34-6e3a11ec90d60242ac120003

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ CidrMap, Vpc, Cidr ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: EnvName
          Value: !Ref EnvName

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Private0, Cidr ]
      AvailabilityZone: !Ref AvailabilityZone0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet0
        - Key: EnvName
          Value: !Ref EnvName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Private1, Cidr ]
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
        - Key: EnvName
          Value: !Ref EnvName

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Public0, Cidr ]
      AvailabilityZone: !Ref AvailabilityZone0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet0
        - Key: EnvName
          Value: !Ref EnvName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ CidrMap, Public1, Cidr ]
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
        - Key: EnvName
          Value: !Ref EnvName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
        - Key: EnvName
          Value: !Ref EnvName

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-rt
        - Key: EnvName
          Value: !Ref EnvName

  PrivateSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetNetworkAclAssociation0:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      NetworkAclId: !GetAtt Vpc.DefaultNetworkAcl

  PrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !GetAtt Vpc.DefaultNetworkAcl

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-igw
        - Key: EnvName
          Value: !Ref EnvName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation0:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      NetworkAclId: !GetAtt Vpc.DefaultNetworkAcl

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !GetAtt Vpc.DefaultNetworkAcl

  EcrRepoistory:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref AWS::StackName
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${AWS::StackName}/ky-ingestion
      RetentionInDays: 30

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Image: !Ref ServiceImage
          Essential: true
          PortMappings:
            - ContainerPort: 8443
          Environment:
            - Name: ENV_NAME
              Value: !Ref EnvName
            - Name: KYC_TABLE
              Value: !Ref KyTable
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref ServiceLogGroup
              awslogs-stream-prefix: !Ref EnvName

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref TaskRolePolicy
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  TaskRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:Put*
              - dynamodb:BatchWrite*
              - dynamodb:Update*
            Resource: !GetAtt KyTable.Arn
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt ServiceLogGroup.Arn
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GetPublicKey
            Resource: '*'

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      ServiceName: !Ref AWS::StackName
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 8443
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt ServiceSg.GroupId
          Subnets:
            - !Ref PrivateSubnet0
            - !Ref PrivateSubnet1
    DependsOn:
      - EcrDockerVpcEndpoint
      - EcrApiVpcEndpoint
      - S3VpcEndpoint
      - CloudWatchLogsVpcEndpoint

  KyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      KinesisStreamSpecification:
        StreamArn: !GetAtt KyDataStream.Arn
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: ShardId
          AttributeType: S
        - AttributeName: EntityId
          AttributeType: S
      KeySchema:
        - AttributeName: ShardId
          KeyType: HASH
        - AttributeName: EntityId # A#EntityId#U || A#EntityId#T#TransactionId - entity can be user or organization
          KeyType: RANGE
      Tags:
        - Key: Data
          Value: Red
        - Key: EnvName
          Value: !Ref EnvName

  KyDataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      StreamModeDetails:
        StreamMode: ON_DEMAND
      RetentionPeriodHours: 8760 # 365 day
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      Tags:
        - Key: Data
          Value: Red
        - Key: EnvName
          Value: !Ref EnvName

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
      SecurityGroups:
        - !GetAtt AlbSg.GroupId
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: true
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - Key: routing.http2.enabled
          Value: true
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: true
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref Vpc
      Port: 8443
      Protocol: HTTPS
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 120
      TargetType: ip
      Tags:
        - Key: EnvName
          Value: !Ref EnvName
    DependsOn: Alb

  GlobalAccelerator:
    Type: AWS::GlobalAccelerator::Accelerator
    Properties:
      Name: !Ref AWS::StackName
      Enabled: true
      IpAddressType: IPV4
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  GlobalAcceleratorListener:
    Type: AWS::GlobalAccelerator::Listener
    Properties:
      AcceleratorArn: !Ref GlobalAccelerator
      ClientAffinity: SOURCE_IP
      PortRanges:
        - FromPort: 443
          ToPort: 443
      Protocol: TCP

  GlobalAcceleratorEndpointGroup:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Properties:
      EndpointGroupRegion: !Ref AWS::Region
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 443
      HealthCheckProtocol: TCP
      ListenerArn: !Ref GlobalAcceleratorListener
      ThresholdCount: 3
      TrafficDialPercentage: 100
      EndpointConfigurations:
        - ClientIPPreservationEnabled: true
          EndpointId: !Ref Alb

  AlbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Alb Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 443
          FromPort: 443
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  AlbSgToServiceEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref AlbSg
      IpProtocol: tcp
      ToPort: 8443
      FromPort: 8443
      DestinationSecurityGroupId: !Ref ServiceSg

  ServiceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Service Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref AlbSg
          IpProtocol: tcp
          ToPort: 8443
          FromPort: 8443
      Tags:
        - Key: EnvName
          Value: !Ref EnvName

  ServiceSgToS3Egress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ServiceSg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      DestinationPrefixListId: !Ref S3PrefixListId

  ServiceSgToDynamoDbEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ServiceSg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      DestinationPrefixListId: !Ref DynamoDbPrefixListId

  ServiceSgToKmsVpcEndpointEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ServiceSg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      DestinationSecurityGroupId: !Ref KmsVpcEndpointSg

  ServiceSgToEcrDockerVpcEndpointSgEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ServiceSg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      DestinationSecurityGroupId: !Ref EcrDockerVpcEndpointSg

  ServiceSgToEcrApiVpcEndpointSgEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ServiceSg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      DestinationSecurityGroupId: !Ref EcrApiVpcEndpointSg

  ServiceSgToCloudWatchLogsVpcEndpointEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ServiceSg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      DestinationSecurityGroupId: !Ref CloudWatchLogsVpcEndpointSg

  Tenant0KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub
        - alias/${Id}
        - Id: !FindInMap [ TenantIds, Tenant0, Id ]
      TargetKeyId: !Ref Tenant0KmsKey

  # Temporary facility until a key/credential service is available/identified
  Tenant0KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !FindInMap [ TenantIds, Tenant0, Id ]
      Enabled: true
      EnableKeyRotation: false
      KeySpec: RSA_4096
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      KeyPolicy:
        Version: 2012-10-17
        Id: key-encrypt-1
        Statement:
          - Sid: Root Permission
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Dev CFN Permission
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:user/cb-temp # Used for development/testing
            Action: kms:*
            Resource: '*'
          - Sid: Encrypt Permission
            Effect: Allow
            Principal:
              AWS: !GetAtt TaskRole.Arn
            Action:
              - kms:DescribeKey
              - kms:GetPublicKey
            Resource: '*'
      Tags:
        - Key: Data
          Value: Red
        - Key: TenantId
          Value: !FindInMap [ TenantIds, Tenant0, Id ]
        - Key: EnvName
          Value: !Ref EnvName

  CloudWatchLogsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
      SecurityGroupIds:
        - !Ref CloudWatchLogsVpcEndpointSg
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface
      VpcId: !Ref Vpc

  KmsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref KmsVpcEndpointSg
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kms
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface
      VpcId: !Ref Vpc

  EcrApiVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EcrApiVpcEndpointSg
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface
      VpcId: !Ref Vpc

  EcrDockerVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EcrDockerVpcEndpointSg
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface
      VpcId: !Ref Vpc

  EcrApiVpcEndpointSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of ECR API VPC Endpoint
      SecurityGroupIngress:
        - CidrIp: !FindInMap [ CidrMap, Vpc, Cidr ]
          Description: Allow all inbound traffic by default
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      VpcId: !Ref Vpc

  EcrDockerVpcEndpointSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of ECR Docker VPC Endpoint
      SecurityGroupIngress:
        - CidrIp: !FindInMap [ CidrMap, Vpc, Cidr ]
          Description: Allow all inbound traffic by default
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      VpcId: !Ref Vpc

  CloudWatchLogsVpcEndpointSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of CloudWatch Logs VPC Endpoint
      VpcId: !Ref Vpc

  CloudWatchLogsVpcEndpointSgFromServiceSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CloudWatchLogsVpcEndpointSg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref ServiceSg

  KmsVpcEndpointSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of KMS VPC Endpoint
      VpcId: !Ref Vpc

  KmsVpcEndpointSgToServiceSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref KmsVpcEndpointSg
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref ServiceSg

  DynamoDbVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref Vpc
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:Put*
              - dynamodb:BatchWrite*
              - dynamodb:Update*
            Resource: !GetAtt KyTable.Arn
            Principal: '*'
            Condition:
              StringEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::prod-${AWS::Region}-starport-layer-bucket/*
            Principal: '*'

